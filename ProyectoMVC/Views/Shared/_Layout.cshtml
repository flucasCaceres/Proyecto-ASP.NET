<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ProyectoMVC</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ProyectoMVC.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">ProyectoMVC</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <button onclick="abrirAuthModal('/Account/Login')" class="btn btn-outline-primary">Ingresar</button>

                        @if (User.Identity.IsAuthenticated)
                        {
                            <form asp-controller="Account" asp-action="Logout" method="post" id="logoutForm">
                                <button type="submit">Logout</button>
                            </form>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - ProyectoMVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @await RenderSectionAsync("Scripts", required: false)
    <!-- Modal contenedor único para login o registro -->
    <div class="modal fade" id="authModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" id="modal-content-container">
          
        </div>
      </div>
    </div>

<script>
  // ─────────────────────────────────────────────────────────────────────────
  // 1) Función para enganchar el submit del form de login
  // ─────────────────────────────────────────────────────────────────────────
  function engancharLoginForm() {
    const formLogin = document.getElementById("loginForm");
    console.log("🧩 engancharLoginForm → form encontrado:", formLogin);
    if (!formLogin) {
      console.warn("⚠️ No hay <form id='loginForm'> en el DOM para enganchar.");
      return;
    }

    // Quitamos cualquier listener anterior para evitar duplicados:
    formLogin.replaceWith(formLogin.cloneNode(true));
    const nuevoForm = document.getElementById("loginForm");

    nuevoForm.addEventListener("submit", async function (e) {
      e.preventDefault();
      console.log("📤 Se disparó submit de #loginForm.");

      const formDataLogin = new FormData(nuevoForm);

      // Hacemos el POST a /Account/Login (asegurate que el action-name coincida)
      const responseLogin = await fetch("/Account/Login", {
        method: "POST",
        body: formDataLogin,
        headers: {
          // Enviamos el token AntiForgery desde el input hidden __RequestVerificationToken
          "RequestVerificationToken": formDataLogin.get("__RequestVerificationToken")
        }
      });

      const contentTypeLogin = responseLogin.headers.get("content-type");
      console.log("🧪 login: status=", responseLogin.status, "content-type=", contentTypeLogin);

      if (contentTypeLogin && contentTypeLogin.includes("application/json")) {
        // → Login exitoso retorna JSON { success: true }
        const resultLogin = await responseLogin.json();
        console.log("🔐 JSON login recibido:", resultLogin);
        if (resultLogin.success) {
          console.log("✅ Login correcto. Cierro modal y redirijo...");
          const modalInst = bootstrap.Modal.getInstance(document.getElementById("authModal"));
          modalInst.hide();
          window.location.href = "/Home/Index"; // o la ruta que uses
          return;
        }
      }

      // Si llegó acá, hubo errores de validación en el servidor (no es JSON)
      const htmlErrorLogin = await responseLogin.text();
      console.log("❌ Errores en login, reinyecto HTML con validaciones.");
      document.getElementById("modal-content-container").innerHTML = htmlErrorLogin;

      // Volvemos a enganchar el formulario recién inyectado
      engancharLoginForm();
    });
  }

  // ─────────────────────────────────────────────────────────────────────────
  // 2) Función para enganchar el submit del form de registro
  // (Similar a la de login, si también necesitás register)
  // ─────────────────────────────────────────────────────────────────────────
  function engancharRegisterForm() {
    const formReg = document.getElementById("registerForm");
    console.log("🧩 engancharRegisterForm → form encontrado:", formReg);
    if (!formReg) {
      console.warn("⚠️ No hay <form id='registerForm'> en el DOM para enganchar.");
      return;
    }

    formReg.replaceWith(formReg.cloneNode(true));
    const nuevoFormReg = document.getElementById("registerForm");

    nuevoFormReg.addEventListener("submit", async function (e) {
      e.preventDefault();
      console.log("📤 Se disparó submit de #registerForm.");

      const formData = new FormData(nuevoFormReg);
      const response = await fetch("/Account/Register", {
        method: "POST",
        body: formData,
        headers: {
          "RequestVerificationToken": formData.get("__RequestVerificationToken")
        }
      });

      const contentType = response.headers.get("content-type");
      console.log("🧪 register: status=", response.status, "content-type=", contentType);

      if (contentType && contentType.includes("application/json")) {
        const result = await response.json();
        console.log("✅ JSON registro recibido:", result);
        if (result.success) {
          console.log("✅ Registro exitoso. Cierro modal y redirijo...");
          const modalInst = bootstrap.Modal.getInstance(document.getElementById("authModal"));
          modalInst.hide();
          window.location.href = "/Privacy/Privacy";
          return;
        }
      }

      // Si caímos acá, hubo errores de validación
      const htmlError = await response.text();
      console.log("❌ Errores en registro, reinyecto HTML con validaciones.");
      document.getElementById("modal-content-container").innerHTML = htmlError;

      // Volvemos a enganchar el formulario recién inyectado
      engancharRegisterForm();
    });
  }

  // ─────────────────────────────────────────────────────────────────────────
  // 3) Función principal: abre el modal y carga el partial indicado
  // ─────────────────────────────────────────────────────────────────────────
  async function abrirAuthModal(ruta) {
    console.log("🧩 abrirAuthModal invocado con ruta:", ruta);
    const modalEl = document.getElementById("authModal");

    // 1) Si hay alguna instancia previa de este modal, la ocultamos y limpiamos backdrop
    const oldInstance = bootstrap.Modal.getInstance(modalEl);
    if (oldInstance) {
      oldInstance.hide();
      document.body.classList.remove("modal-open");
      document.querySelectorAll(".modal-backdrop").forEach(el => el.remove());
    }

    // 2) Pequeña demora para asegurarnos de que desaparezca el backdrop
    setTimeout(async () => {
      // 3) Hacemos GET para traer el partial (Login o Register)
      const res = await fetch(ruta);
      if (!res.ok) {
        console.error("🚨 Error al hacer GET de", ruta, "→ status:", res.status);
        return;
      }
      const html = await res.text();

      // 4) Inyectamos el HTML recibido dentro de modal-content-container
      document.getElementById("modal-content-container").innerHTML = html;

      // 5) Mostramos el modal
      const newInstance = new bootstrap.Modal(modalEl);
      newInstance.show();

      // 6) Ahora sí, dependiendo de la ruta, enganchamos el form correcto:
      if (ruta.includes("/Login")) {
        engancharLoginForm();
      }
      else if (ruta.includes("/Register")) {
        engancharRegisterForm();
      }
      else {
        console.warn("⚠️ Ruta no reconocida. No enganchamos ningún form:", ruta);
      }
    }, 150);
  }
</script>

</body>
</html>